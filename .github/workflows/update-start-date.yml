name: Project - Update Start Date

on:
  issues:
    types: [edited]  # Run when an issue is edited
concurrency:
  group: set-start-date-${{ github.event.issue.number }}
  cancel-in-progress: false

jobs:
  update_start_date:
    runs-on: ubuntu-latest
    steps:
      - name: Update Start Date if Missing
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const issue = context.payload.issue;
            const issueNumber = issue.number;
            const repo = context.repo;
            const repoName = repo.repo;
            const owner = repo.owner;
            const assignees = issue.assignees.map(a => a.login);
            const editor = context.payload.sender.login;
            let projectNumber;

            console.log(`Repo: ${repoName}, Owner: ${owner}, Editor: ${editor}`);
            console.log(`🔍 Issue #${issue.number} was edited by: ${editor}`);

            // Only proceed if the editor is an assignee
            if (!assignees.includes(editor)) {
              console.log(`⏭️ Editor ${editor} is not an assignee. Skipping Start Date update.`);
              return;
            }

            if (context.eventName === "issues") {
                console.log(`🔎 Fetching linked Projects v2 for issue #${issueNumber}: "${issue.title}"`);

            const result = await github.graphql(`
              query($owner: String!, $repo: String!, $issue: Int!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $issue) {
                    projectItems(first: 10) {
                      nodes {
                        project {
                          ... on ProjectV2 {
                            number
                            title
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, {
              owner,
              repo: repoName,
              issue: issueNumber
            });

            const items = result.repository.issue.projectItems.nodes;

            if (!items || items.length === 0) {
              console.log("❌ Issue is not linked to any Projects v2. Skipping.");
              return;
            }

            const linkedProject = items.find(item => item.project?.number);
            if (!linkedProject) {
              console.log("❌ No usable ProjectV2 object found.");
              return;
            }

            projectNumber = linkedProject.project.number;
            console.log(`✅ Linked project found: "${linkedProject.project.title}" (Project #${projectNumber})`);
            }

            // Fetch the project ID
            const projectsResponse = await github.graphql(`
            query($owner: String!, $projectNumber: Int!) {
              organization(login: $owner) {  
                projectV2(number: $projectNumber) {  
                  id
                  items(first: 50) {
                    nodes {
                      id
                      content {
                        ... on Issue {
                          number
                        }
                      }
                    }
                  }
                }
              }
            }`, { owner, projectNumber: projectNumber }); 

            const projectId = projectsResponse.organization?.projectV2?.id;
            if (!projectId) {
              console.log("❌ Project ID not found. Exiting.");
              return;
            }

            // Find the matching project item
            const projectItems = projectsResponse.organization?.projectV2?.items?.nodes || [];
            const item = projectItems.find(item => item.content?.number === issue.number);
            if (!item) {
              console.log(`❌ Issue #${issue.number} is not in the project.`);
              return;
            }

            const itemId = item.id;

            // Fetch Project Fields to check if "Start Date" exists
            const fieldsResponse = await github.graphql(`
            query($projectId: ID!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  fields(first: 20) {
                    nodes {
                      __typename
                      ... on ProjectV2FieldCommon {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }`, { projectId });

            if (!fieldsResponse.node || !fieldsResponse.node.fields) {
              console.log("❌ Failed to fetch project fields.");
              return;
            }

            const fields = fieldsResponse.node.fields.nodes || [];
            const startDateField = fields.find(f => f.name === "Start Date");

            if (!startDateField) {
              console.log("❌ 'Start Date' field not found in project.");
              return;
            }

            const startDateFieldId = startDateField.id;

            // Check if Start Date is already set
            console.log(`🔎 Checking if Start Date is already set for Issue #${issue.number}`);

            const itemFieldsResponse = await github.graphql(`
            query($itemId: ID!) {
            node(id: $itemId) {
                ... on ProjectV2Item {
                fieldValues(first: 10) {
                    nodes {
                    __typename
                    ... on ProjectV2ItemFieldDateValue {
                        field {
                        ... on ProjectV2FieldCommon {
                            name
                        }
                        }
                        date
                    }
                    }
                }
                }
            }
            }`, { itemId });

            if (!itemFieldsResponse.node || !itemFieldsResponse.node.fieldValues) {
              console.log("❌ Failed to fetch item fields.");
              return;
            }

            const startDateFieldValue = itemFieldsResponse.node.fieldValues.nodes.find(
                f => f?.field?.name === "Start Date" // ✅ Ensure 'field' is not undefined
            );

            if (startDateFieldValue?.date) {  // ✅ Correctly checks `date`
                console.log(`✅ Start Date already set: ${startDateFieldValue.date}`);
                return;
            }

            

            // Set Start Date (Current Date)
            const today = new Date().toISOString().split("T")[0];

            console.log(`📅 Setting Start Date to: ${today}`);

            await github.graphql(`
            mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: Date!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $projectId,
                itemId: $itemId,
                fieldId: $fieldId,
                value: { date: $value } 
              }) {
                projectV2Item {
                  id
                }
              }
            }`, { projectId, itemId, fieldId: startDateFieldId, value: new Date(today) });

            console.log("✅ Start Date successfully updated!");
            