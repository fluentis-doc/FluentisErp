name: Review Modified/Deleted Translations

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**' # Folder to watch for changes
#   pull_request:
#     branches:
#       - main
#     paths:
#       - 'docs/**' # Folder to watch for changes

jobs:
  create-issues:
    runs-on: ubuntu-latest
    permissions:
        issues: write
        contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch at least 2 commits to compare HEAD with HEAD^

      - name: Get modified and deleted .md files from the last commit
        id: get-files
        run: |
            # Get list of modified .md files
            modified_files=$(git diff-tree --no-commit-id --name-status -r HEAD | grep -E '^M\s.*\.md$' | awk '{print $2}' | grep '^docs/' || true)
            echo "Modified files: $modified_files"

            # Join modified files with a space delimiter and write to the environment
            modified_files_joined=$(echo "$modified_files" | tr '\n' ' ')
            echo "modified_files=$modified_files_joined" >> $GITHUB_ENV

            # Get list of deleted .md files
            deleted_files=$(git diff-tree --no-commit-id --name-status -r HEAD | grep -E '^D\s.*\.md$' | awk '{print $2}' | grep '^docs/' || true)
            echo "Deleted files: $deleted_files"

            # Join deleted files with a space delimiter and write to the environment
            deleted_files_joined=$(echo "$deleted_files" | tr '\n' ' ')
            echo "deleted_files=$deleted_files_joined" >> $GITHUB_ENV

            # Handle no matching files gracefully
            if [ -z "$modified_files_joined" ] && [ -z "$deleted_files_joined" ]; then
                echo "No modified or deleted .md files found in the docs/ folder."
                exit 0
            fi

      - name: Define languages and teams
        id: define-teams
        run: |
          # Define languages
          languages=("en-US" "ro-RO" "hr-HR")

          # Initialize an empty array for team names
          team_names=()

          # Dynamically generate team names based on languages
          for lang in "${languages[@]}"; do
            # Extract the language code (e.g., 'en' from 'en-US')
            lang_code=$(echo "$lang" | cut -d'-' -f1)
            # Compose team name (e.g., 'translation-team-en')
            team_name="translation-team-${lang_code}"
            team_names+=("$team_name")
          done

          # Debug: Print languages and team names
          echo "Languages: ${languages[*]}"
          echo "Team names: ${team_names[*]}"

          # Save the language and team arrays to environment variables
          echo "languages=${languages[*]}" >> $GITHUB_ENV
          echo "team_names=${team_names[*]}" >> $GITHUB_ENV

      - name: Create issues for each team
        if: env.deleted_files != '' || env.modified_files != ''
        run: |
            # Read the languages and teams from the environment variables
            IFS=' ' read -r -a languages <<< "$languages"
            IFS=' ' read -r -a team_names <<< "$team_names"
        
            echo "Parsed languages: ${languages[@]}"
            echo "Parsed team names: ${team_names[@]}"
        
            # Create issues for each language team
            for i in ${!languages[@]}; do
                lang=${languages[$i]}
                team=${team_names[$i]}
        
                echo "Processing language: $lang, Team: $team"
        
                # Prepare the issue body for modified files
                if [ -n "$modified_files" ]; then
                body="The following files have been modified and need to be reviewed for translation to ${lang}:\n"
                for file in $modified_files; do
                    body+="- ${file}\n"
                done
        
                echo "Issue body content for modified files - $lang: $body"
        
                gh issue create \
                    --title "Review modified files in docs folder - ${lang}" \
                    --body "$body" \
                    --assignee "@${team}" \
                    --label "translation"
                fi
        
                # Prepare the issue body for deleted files
                if [ -n "$deleted_files" ]; then
                body="The following files have been deleted and need to be reviewed for translation to ${lang}:\n"
                for file in $deleted_files; do
                    body+="- ${file}\n"
                done
        
                echo "Issue body content for deleted files - $lang: $body"
        
                gh issue create \
                    --title "Review deleted files in docs folder - ${lang}" \
                    --body "$body" \
                    --assignee "@${team}" \
                    --label "translation"
                fi
            done